package main

import (
	"flag"
	"fmt"
	"log"
	"time"

	"github.com/miekg/dns"
	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/client-go/informers"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/tools/cache"
	"k8s.io/client-go/tools/clientcmd"
)

func main() {
	kubeconfig := flag.String("kubeconfig", "/Users/vasko/.kube/config", "Path to a kubeconfig file")
	flag.Parse()

	config, err := clientcmd.BuildConfigFromFlags("", *kubeconfig)
	if err != nil {
		log.Fatalf("Error building kubeconfig: %v", err)
	}

	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		log.Fatalf("Error creating clientset: %v", err)
	}

	// Create a shared informer factory for the clientset
	factory := informers.NewSharedInformerFactory(clientset, time.Second*30)

	// Retrieve the Endpoints informer from the factory
	endpointsInformer := factory.Core().V1().Endpoints().Informer()

	// Add event handlers to the Endpoints informer
	endpointsInformer.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			endpoints := obj.(*v1.Endpoints)
			printEndpoints(endpoints)

		},
		UpdateFunc: func(oldObj, newObj interface{}) {
			newEndpoints := newObj.(*v1.Endpoints)
			//oldEndpoints := oldObj.(*v1.Endpoints)
			printEndpoints(newEndpoints)

		},
		DeleteFunc: func(obj interface{}) {
			endpoints := obj.(*v1.Endpoints)
			fmt.Printf("Deleted Endpoints: %s\n", endpoints.Name)
		},
	})


	// Start the informer
	stopCh := make(chan struct{})
	defer close(stopCh)
	factory.Start(stopCh)
	runtime.HandleCrash()

	select {}
	fmt.Printf("DONE")
}

func printEndpoints(endpoints *v1.Endpoints) {
	for _, subset := range endpoints.Subsets {
		for _, address := range subset.Addresses {
			fmt.Printf("%s  IP: %s\n", endpoints.Name, address.IP)
		}
	}
}
